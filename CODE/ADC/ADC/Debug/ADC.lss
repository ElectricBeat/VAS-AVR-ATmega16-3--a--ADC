
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070d  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000259  00000000  00000000  00000b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c8  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022a  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047e  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  8a:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
}

void LCD_Clear()
{
	LCD_Command (0x01);					/* clear display */
	LCD_Command (0x80);					/* cursor at home position */
  92:	ae 98       	cbi	0x15, 6	; 21
  94:	af 9a       	sbi	0x15, 7	; 21
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	28 2f       	mov	r18, r24
  9a:	20 7f       	andi	r18, 0xF0	; 240
  9c:	9f 70       	andi	r25, 0x0F	; 15
  9e:	92 2b       	or	r25, r18
  a0:	9b bb       	out	0x1b, r25	; 27
  a2:	e9 ef       	ldi	r30, 0xF9	; 249
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_Command+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_Command+0x1a>
  ac:	00 00       	nop
  ae:	af 98       	cbi	0x15, 7	; 21
  b0:	e9 ef       	ldi	r30, 0xF9	; 249
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Command+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_Command+0x28>
  ba:	00 00       	nop
  bc:	af 9a       	sbi	0x15, 7	; 21
  be:	2b b3       	in	r18, 0x1b	; 27
  c0:	f0 e1       	ldi	r31, 0x10	; 16
  c2:	8f 9f       	mul	r24, r31
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	92 2f       	mov	r25, r18
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Command+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_Command+0x48>
  da:	00 00       	nop
  dc:	af 98       	cbi	0x15, 7	; 21
  de:	e9 ef       	ldi	r30, 0xF9	; 249
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Command+0x50>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Command+0x56>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <LCD_Char>:
  ec:	ae 9a       	sbi	0x15, 6	; 21
  ee:	af 9a       	sbi	0x15, 7	; 21
  f0:	9b b3       	in	r25, 0x1b	; 27
  f2:	28 2f       	mov	r18, r24
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	9f 70       	andi	r25, 0x0F	; 15
  f8:	92 2b       	or	r25, r18
  fa:	9b bb       	out	0x1b, r25	; 27
  fc:	e9 ef       	ldi	r30, 0xF9	; 249
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Char+0x14>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Char+0x1a>
 106:	00 00       	nop
 108:	af 98       	cbi	0x15, 7	; 21
 10a:	e9 ef       	ldi	r30, 0xF9	; 249
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_Char+0x22>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_Char+0x28>
 114:	00 00       	nop
 116:	af 9a       	sbi	0x15, 7	; 21
 118:	2b b3       	in	r18, 0x1b	; 27
 11a:	f0 e1       	ldi	r31, 0x10	; 16
 11c:	8f 9f       	mul	r24, r31
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	92 2f       	mov	r25, r18
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	89 2b       	or	r24, r25
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_Char+0x42>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_Char+0x48>
 134:	00 00       	nop
 136:	af 98       	cbi	0x15, 7	; 21
 138:	e9 ef       	ldi	r30, 0xF9	; 249
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Char+0x50>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Char+0x56>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <divider>:
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	2a e0       	ldi	r18, 0x0A	; 10
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 156:	c8 2f       	mov	r28, r24
 158:	cb 01       	movw	r24, r22
 15a:	b9 01       	movw	r22, r18
 15c:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 160:	d8 2f       	mov	r29, r24
 162:	cb 01       	movw	r24, r22
 164:	b9 01       	movw	r22, r18
 166:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 16a:	18 2f       	mov	r17, r24
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	86 0f       	add	r24, r22
 170:	0e 94 76 00 	call	0xec	; 0xec <LCD_Char>
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	81 0f       	add	r24, r17
 178:	0e 94 76 00 	call	0xec	; 0xec <LCD_Char>
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	8d 0f       	add	r24, r29
 180:	0e 94 76 00 	call	0xec	; 0xec <LCD_Char>
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	8c 0f       	add	r24, r28
 188:	0e 94 76 00 	call	0xec	; 0xec <LCD_Char>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	08 95       	ret

00000194 <LCD_String>:
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
 19a:	88 81       	ld	r24, Y
 19c:	88 23       	and	r24, r24
 19e:	31 f0       	breq	.+12     	; 0x1ac <LCD_String+0x18>
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	0e 94 76 00 	call	0xec	; 0xec <LCD_Char>
 1a6:	89 91       	ld	r24, Y+
 1a8:	81 11       	cpse	r24, r1
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <LCD_String+0xe>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_Init>:
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<PINC6);		/* Make LCD command port direction as o/p */
 1b2:	a6 9a       	sbi	0x14, 6	; 20
	LCD_Command_Dir |= (1<<PINC7);		/* Make LCD command port direction as o/p */
 1b4:	a7 9a       	sbi	0x14, 7	; 20

	LCD_Data_Dir |= (1<<PINA4);			/* Make LCD data port direction as o/p */
 1b6:	d4 9a       	sbi	0x1a, 4	; 26
	LCD_Data_Dir |= (1<<PINA5);			/* Make LCD data port direction as o/p */
 1b8:	d5 9a       	sbi	0x1a, 5	; 26
	LCD_Data_Dir |= (1<<PINA6);			/* Make LCD data port direction as o/p */
 1ba:	d6 9a       	sbi	0x1a, 6	; 26
	LCD_Data_Dir |= (1<<PINA7);			/* Make LCD data port direction as o/p */
 1bc:	d7 9a       	sbi	0x1a, 7	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	87 e8       	ldi	r24, 0x87	; 135
 1c0:	93 e1       	ldi	r25, 0x13	; 19
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_Init+0x10>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_Init+0x16>
 1c8:	00 00       	nop

	_delay_ms(20);						/* LCD Power ON delay always >15ms */

	LCD_Command (0x02);					/* send for 4 bit initialization of LCD  */
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x28);					/* 2 line, 5*7 matrix in 4-bit mode */
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x0C);					/* Display ON Cursor OFF */
 1d6:	8c e0       	ldi	r24, 0x0C	; 12
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x06);					/* Auto Increment cursor */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x01);					/* Clear display */
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x80);					/* Cursor at home position */
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1ee:	08 95       	ret

000001f0 <ADC_Init>:
char String[5];
int value;

void ADC_Init()
{
	DDRA	=	0xF0;					/* Make ADC port as input */
 1f0:	80 ef       	ldi	r24, 0xF0	; 240
 1f2:	8a bb       	out	0x1a, r24	; 26
	ADCSRA	=	0x83;					/* Enable ADC, fr/8  */
 1f4:	83 e8       	ldi	r24, 0x83	; 131
 1f6:	86 b9       	out	0x06, r24	; 6
	ADMUX	=	0x40;					/* Vref: internal 2, ADC channel: 0 */
 1f8:	80 e4       	ldi	r24, 0x40	; 64
 1fa:	87 b9       	out	0x07, r24	; 7
 1fc:	08 95       	ret

000001fe <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);		/* Set input channel to read */
 1fe:	97 b1       	in	r25, 0x07	; 7
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	98 2b       	or	r25, r24
 204:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);				/* Start conversion */
 206:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);		/* Monitor end of conversion interrupt */
 208:	34 9b       	sbis	0x06, 4	; 6
 20a:	fe cf       	rjmp	.-4      	; 0x208 <ADC_Read+0xa>
	
//	_delay_us(10);
	AinLow = (int)ADCL;					/* Read lower byte*/
 20c:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;				/* Read higher 2 bits and Multiply with weight */
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	98 2f       	mov	r25, r24
 214:	88 27       	eor	r24, r24
	Ain = Ain + AinLow;				
	return(Ain);						/* Return digital value*/
}
 216:	82 0f       	add	r24, r18
 218:	91 1d       	adc	r25, r1
 21a:	08 95       	ret

0000021c <main>:

int main()
{
	LCD_Init();							/* Initialize LCD */
 21c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Init>
	ADC_Init();							/* Initialization of ADC */
 220:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <ADC_Init>
}

void lcd_cursor(unsigned char row,unsigned char col)
{
	if(row==1)
	LCD_Command(0X80+col);
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>

	while (1)
	{
		lcd_cursor(1,0);				/* Go to 1st line*/
		LCD_String("ADC:");				/* write string on 1st line of LCD*/
 22a:	80 e6       	ldi	r24, 0x60	; 96
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_String>
 232:	84 e8       	ldi	r24, 0x84	; 132
 234:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		lcd_cursor (1,4);
		value=ADC_Read(0);				/* Read ADC channel 0 */
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ADC_Read>
 23e:	90 93 6c 00 	sts	0x006C, r25
 242:	80 93 6b 00 	sts	0x006B, r24
		divider(value);
 246:	0e 94 a3 00 	call	0x146	; 0x146 <divider>
//		itoa(value,String,10);			/* int. to string conversion */
//		LCD_String(String);
//		LCD_String("  ");
	}
 24a:	ec cf       	rjmp	.-40     	; 0x224 <main+0x8>

0000024c <__divmodhi4>:
 24c:	97 fb       	bst	r25, 7
 24e:	07 2e       	mov	r0, r23
 250:	16 f4       	brtc	.+4      	; 0x256 <__divmodhi4+0xa>
 252:	00 94       	com	r0
 254:	07 d0       	rcall	.+14     	; 0x264 <__divmodhi4_neg1>
 256:	77 fd       	sbrc	r23, 7
 258:	09 d0       	rcall	.+18     	; 0x26c <__divmodhi4_neg2>
 25a:	0e 94 3a 01 	call	0x274	; 0x274 <__udivmodhi4>
 25e:	07 fc       	sbrc	r0, 7
 260:	05 d0       	rcall	.+10     	; 0x26c <__divmodhi4_neg2>
 262:	3e f4       	brtc	.+14     	; 0x272 <__divmodhi4_exit>

00000264 <__divmodhi4_neg1>:
 264:	90 95       	com	r25
 266:	81 95       	neg	r24
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	08 95       	ret

0000026c <__divmodhi4_neg2>:
 26c:	70 95       	com	r23
 26e:	61 95       	neg	r22
 270:	7f 4f       	sbci	r23, 0xFF	; 255

00000272 <__divmodhi4_exit>:
 272:	08 95       	ret

00000274 <__udivmodhi4>:
 274:	aa 1b       	sub	r26, r26
 276:	bb 1b       	sub	r27, r27
 278:	51 e1       	ldi	r21, 0x11	; 17
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__udivmodhi4_ep>

0000027c <__udivmodhi4_loop>:
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	a6 17       	cp	r26, r22
 282:	b7 07       	cpc	r27, r23
 284:	10 f0       	brcs	.+4      	; 0x28a <__udivmodhi4_ep>
 286:	a6 1b       	sub	r26, r22
 288:	b7 0b       	sbc	r27, r23

0000028a <__udivmodhi4_ep>:
 28a:	88 1f       	adc	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	5a 95       	dec	r21
 290:	a9 f7       	brne	.-22     	; 0x27c <__udivmodhi4_loop>
 292:	80 95       	com	r24
 294:	90 95       	com	r25
 296:	bc 01       	movw	r22, r24
 298:	cd 01       	movw	r24, r26
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
